from pygame import mixer
from mutagen.mp3 import EasyMP3

# créer une playlist à partir de critères divers (artiste, année, etc.), (Georges, Loic, Youlan) 
 
def generate_playlist(name, artist = None, year = None, genre = None):
    """generate a playlist according to the user's choice
    Parameters
    ----------
    name: name of the playlist (str)
    artist: create a playlist containing every song from 1 artist (str)
    year: create a playlist containing every song from a designated year (int)
    genre: create a playlist containing every song from a designated genre (str)

    
    Version
    -------
    specification: Hoebrechts Georges, Collard Youlan (v0.2)
    implementation: 
    """
    raise NotImplementedError()
 
# afficher le nom de toutes les playlists disponibles, (Georges, Loic, Youlan) 
 
def show_all_playlist():
    """show every playlist created by the user
    
    Version
    -------
    specification: Hoebrechts Georges (v0.1)
    implementation: 
    """ 
    raise NotImplementedError()
 
# afficher les morceaux contenus dans une playlist, (Georges, Loic, Youlan, P-A) 
 
def show_content_playlist(playlist):
    """show the content of a playlist created by the user
    Parameters
    ----------
    playlist : name of the playlist (str)
    
    Version
    -------
    specification: Hoebrechts Georges (v0.1)
    implementation: 
    """    
    raise NotImplementedError()
 
# lire une playlist du début à la fin (appel « bloquant »). (Georges, Loic, Youlan) 
 
def read_playlist(playlist):
    """read every song contained in a playlist
    Parameters
    ----------
    playlist : name of the playlist (str)
    
    Version
    -------
    specification: Hoebrechts Georges (v0.1)
    implementation: 
    """
    raise NotImplementedError()      

def sort_music(dir_path):
    """Extract music files from a directory and sort them into authors directory and album sub-directory
    
    Parameters
    ----------
    dir_path: path to directory containing the music files to sort (str)
    
    Returns
    -------
    music_dict: dicionnary containing all musics and their infos (dict)
    
    Version
    -------
    specification: Aliti Dzenetan (v0.1)
    implementation:
    """
    raise NotImplementedError()

def show_all_music(music_list):
    """Display all the music files contained in a directory and its subdirectories.
    
    Parameters
    ----------
    music_list: List of dictionnaries containing all stored songs (list)
    
    Version
    -------
    specification: Aliti Dzenetan (v0.1)
    implementation:
    """
    raise NotImplementedError()

def play_music(title, music_dict):
    """
    Play music from start to finish
    
    Parameters
    ----------
    title: Title of the song (str) #Peut être info à trouvé avec mutagen pour indentification unique
    music_dict : Main data structures generated by sort_music (dict)
 
    Version
    -------
    specification: Reeckel Dadzie, Collard Youlan (v0.2)
    implementation: 
    """
    #TODO: Build path from song_dict
#     mixer.music.load()
#     mixer.music.play()


# mixer.init()

_data_structures = [
    {
        'title': 'title',
        'artist': 'artist',
        'year': '2014',
        'album': 'dfdff',
        'track_number': '01',
        'genre': 'Rock'
    },
    {
        'title': 'title2',
        'artist': 'artist2',
        'year': '2015',
        'album': 'gfdiuovjfdi',
        'track_number': '02',
        'genre': 'Jazz'
    }
]

for index, song in enumerate(_data_structures):
    if song['title'] == 'title2' and song['artist'] == 'artist2':
        print(_data_structures[index])

tag = EasyMP3('./test.mp3')
print(tag)